)
plot(cal5,lwd=1,lty=1,errbar.col='green',col='green',add=T)
plot(cal10,lwd=1,lty=1,errbar.col='orange',col='orange',add=T)
text(0.86,0.03,'10-year Survival',col='orange',cex =0.7)
text(0.86,0.1,'5-year Survival',col='green',cex =0.7)
text(0.86,0.17,'3-year Survival',col='blue',cex =0.7)
text(0.86,0.24,'1-year Survival',col='red',cex =0.7)
dev.off()
}
library(survival)
library(rms)
library(survivalROC)
#load the matrix for nomogram construction---dat_nom
l = load(file = file.path(Rdata_dir,'dat_for_nomogram_construction.Rdata'))
l
dd <- datadist(dat_nom)
options(datadist='dd')
dd
coxm <- cph(Surv(time,status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom, x=T, y=T, surv = T)
surv <- Survival(coxm)
surv1 <- function(x)surv(1,lp=x)
surv3 <- function(x)surv(3,lp=x)
surv5 <- function(x)surv(5,lp=x)
surv10 <- function(x)surv(10,lp=x)
nom<- nomogram(coxm,
fun = list(surv1,surv3,
surv5,surv10),
fun.at = c(0.1,seq(0.1,0.9,by=0.1),0.9),
maxscale = 100,#default maximum point score is 100
funlabel = c('1-Year Survival','3-Year Survival',
'5-Year Survival','10-Year Survival'),
lp=F
)
if(T){
f1 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=1)
f3 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=3)
f5 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=5)
f10 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=10)
cal1 <- calibrate(f1, cmethod="KM", method="boot",
u=1, # u represents the predicted time point, which should be consistent with time.inc defined in above model
m=112, # m should be determined according to sample size.
#The standard curve generally divides all samples into 3 groups (3 points shown in the figure).
#m represents the sample size of each group, so m*3 should be equal to or approximately equal to the sample size
B=336
)
cal3 <- calibrate(f3, cmethod="KM", method="boot",
u=3,
m=112,
B=336
)
cal5 <- calibrate(f5, cmethod="KM", method="boot",
u=5,
m=112,
B=336
)
cal10 <- calibrate(f10, cmethod="KM", method="boot",
u=10,
m=112,
B=500
)
}
# Plot
if(T){
Fig_name = file.path(Figure_dir,'step09_nom_calibration_6_6cm.pdf')
pdf(Fig_name,
width = 4,
height = 4)
#mai = c(bottom, left, top, right) in inches.
par(mai = c(0.8,0.8,0.05,0.1))
plot(cal1,lwd=1.2,lty=1,
cex.axis=0.7,
cex.lab=0.8,
errbar.col='red',
xlim=c(0,1.05),
ylim=c(0,1.05),
xlab="Predicted Survival Probability",
ylab="Actual Survival Probability",
col='red',
subtitles=F
)
plot(cal3,lwd=1,lty=1,
errbar.col='blue',col='blue',
add=T #set to TRUE to add the calibration plot to an existing plot
)
plot(cal5,lwd=1,lty=1,errbar.col='green',col='green',add=T)
plot(cal10,lwd=1,lty=1,errbar.col='orange',col='orange',add=T)
text(0.86,0.03,'10-year Survival',col='orange',cex =0.7)
text(0.86,0.1,'5-year Survival',col='green',cex =0.7)
text(0.86,0.17,'3-year Survival',col='blue',cex =0.7)
text(0.86,0.24,'1-year Survival',col='red',cex =0.7)
dev.off()
}
GSEName = 'GSE98394'
# step01.load clinical data and riskScore of GEO dataset
if(T){
load(file = file.path(Rdata_dir,paste(GSEName,'RData',sep=".")))
a=as.data.frame(t(exprSet))
ggplot(a,aes(x=a[,2]))+geom_density()
identical(rownames(meta),colnames(exprSet))
phe = na.omit(meta[,c(11,12,4,7,8)])
colnames(phe) = c('time','status','age','T','N')
phe$time = as.numeric(phe$time)
phe$time = phe$time/12
phe = na.omit(phe)
dim(phe)
exprSet = exprSet[,rownames(phe)]
dim(exprSet)
#Calculate RS for patients
if(T){
load(file = file.path(Rdata_dir,'step50_LASSO_modeleGenes_coef.RData'))
LASSOgenes = rownames(coef_out3)
exprSet_t = t(exprSet)
LASSOgenes[3] = 'RASSF3'
expr_LASSOgenes = exprSet_t[,LASSOgenes]
phe = cbind(phe,expr_LASSOgenes)
phe$riskScore = coef_out3[1,1]*phe[,6] + coef_out3[2,1]*phe[,7] +
coef_out3[3,1]*phe[,8] + coef_out3[4,1]*phe[,9] +
coef_out3[5,1]*phe[,10] + coef_out3[6,1]*phe[,11] + coef_out3[7,1]*phe[,12]
phe = phe[order(phe$riskScore,decreasing = FALSE),]
}
#Collect data for medel validation
dat_geo = phe
dat_geo$Age = ifelse(dat_geo$age<75,'<75','>=75')
dat_geo$Age = factor(dat_geo$Age,ordered=F,levels = c('<75','>=75'))
dat_geo$Stage_T = factor(substr(dat_geo$T,1,2),ordered=F,levels = c('T0','T1','T2','T3','T4'))
stage_N = substr(dat_geo$N,1,2)
dat_geo$Stage_N = ifelse(stage_N=='Nx','N1',stage_N)
colnames(dat_geo)[13] = 'RiskScore'
dat_geo = dat_geo[,c('time','status','Age','Stage_T','Stage_N','RiskScore')]
}
GSEName = 'GSE98394'
load(file = file.path(Rdata_dir,paste(GSEName,'RData',sep=".")))
load(file = file.path(Rdata_dir,paste(GSEName,'RData',sep=".")))
a=as.data.frame(t(exprSet))
# step01.load clinical data and riskScore of GEO dataset
if(T){
load(file = file.path(Rdata_dir,paste(GSEName,'RData',sep=".")))
a=as.data.frame(t(exprSet))
ggplot(a,aes(x=a[,2]))+geom_density()
identical(rownames(meta),colnames(exprSet))
phe = na.omit(meta[,c(11,12,4,7,8)])
colnames(phe) = c('time','status','age','T','N')
phe$time = as.numeric(phe$time)
phe$time = phe$time/12
phe = na.omit(phe)
dim(phe)
exprSet = exprSet[,rownames(phe)]
dim(exprSet)
#Calculate RS for patients
if(T){
load(file = file.path(Rdata_dir,'step50_LASSO_modeleGenes_coef.RData'))
LASSOgenes = rownames(coef_out3)
exprSet_t = t(exprSet)
LASSOgenes[3] = 'RASSF3'
expr_LASSOgenes = exprSet_t[,LASSOgenes]
phe = cbind(phe,expr_LASSOgenes)
phe$riskScore = coef_out3[1,1]*phe[,6] + coef_out3[2,1]*phe[,7] +
coef_out3[3,1]*phe[,8] + coef_out3[4,1]*phe[,9] +
coef_out3[5,1]*phe[,10] + coef_out3[6,1]*phe[,11] + coef_out3[7,1]*phe[,12]
phe = phe[order(phe$riskScore,decreasing = FALSE),]
}
#Collect data for medel validation
dat_geo = phe
dat_geo$Age = ifelse(dat_geo$age<75,'<75','>=75')
dat_geo$Age = factor(dat_geo$Age,ordered=F,levels = c('<75','>=75'))
dat_geo$Stage_T = factor(substr(dat_geo$T,1,2),ordered=F,levels = c('T0','T1','T2','T3','T4'))
stage_N = substr(dat_geo$N,1,2)
dat_geo$Stage_N = ifelse(stage_N=='Nx','N1',stage_N)
colnames(dat_geo)[13] = 'RiskScore'
dat_geo = dat_geo[,c('time','status','Age','Stage_T','Stage_N','RiskScore')]
}
if(T){
fev3 <- cph(Surv(time, status) ~ predict(coxm, newdata=dat_geo),
data = dat_geo,
x=T, y=T, surv=T, time.inc=3)
fev5 <- cph(Surv(time, status) ~ predict(coxm, newdata=dat_geo),
data = dat_geo,
x=T, y=T, surv=T, time.inc=5)
fev10 <- cph(Surv(time, status) ~ predict(coxm, newdata=dat_geo),
data = dat_geo,
x=T, y=T, surv=T, time.inc=10)
calev3 <- calibrate(fev3, cmethod="KM", method="boot",
u=3, m=14, B=1000)
calev5 <- calibrate(fev5, cmethod="KM", method="boot",
u=5, m=14, B=1000)
calev10 <- calibrate(fev10, cmethod="KM", method="boot",
u=10, m=14, B=1000)
}
calev_3 = as.matrix(calev3[,c(7:10)])
calev_3 = cbind(rep('3_year',nrow(calev_3)),calev_3)
calev_5 = as.matrix(calev5[,c(7:10)])
calev_5 = cbind(rep('5_year',nrow(calev_5)),calev_5)
calev_10 = as.matrix(calev10[,c(7:10)])
calev_10 = cbind(rep('10_year',nrow(calev_10)),calev_10)
calev_plot = rbind(calev_3,calev_5,calev_10)
colnames(calev_plot)[1] = c('group')
calev_plot = as.data.frame(calev_plot)
calev_plot[,2:5] = apply(calev_plot[,2:5],c(1,2),as.numeric)
View(calev_plot)
calev_plot$ymin = calev_plot$KM-calev_plot$std.err
calev_plot$ymax = calev_plot$KM+calev_plot$std.err
calev_plot$ymin = ifelse(calev_plot$ymin<0,0,calev_plot$ymin)
calev_plot$ymax = ifelse(calev_plot$ymax>1,1,calev_plot$ymax)
if(T){
p1 <- ggplot(calev_plot,aes(x=mean.predicted, y=KM, colour=group,group=group)) +
geom_abline(intercept = 0,slope = 1,lty=2,lwd=0.4,colour="black")+
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=0.025, size=0.4) +
geom_line(size=0.7)+
geom_point(shape = 16, size=1.5)+
geom_point(aes(x=mean.predicted, y=KM.corrected, colour=group,group=group),
shape =4, size = 1)+
xlim(0,1) + ylim(0,1) +
labs(title="Validation cohort",
x="False positive rate",
y="True positive rate") +
scale_colour_manual(values = c('blue','green','orange'),
limits = c('3_year','5_year','10_year'),
labels = c('3 year','5 year','10 year')
)
p <- p1 + theme(
panel.background = element_rect(fill = 'transparent'),
legend.background = element_rect(fill = 'transparent'),
legend.key = element_rect(fill = 'transparent'),
panel.grid=element_blank(),
plot.title    = element_text(color = 'black', size   = 8.5, face = 'bold',hjust = 0.5),
plot.subtitle = element_text(color = 'black', size   = 6,hjust = 0.5),
plot.caption  = element_text(color = 'black', size   = 6,face = 'italic', hjust = 1),
axis.text.x   = element_text(color = 'black', size = 6, angle = 0),
axis.text.y   = element_text(color = 'black', size = 6, angle = 0),
axis.title.x  = element_text(color = 'black', size = 7.5, angle = 0),
axis.title.y  = element_text(color = 'black', size = 7.5, angle = 90),
legend.position=c(0.83,0.14),
legend.key.size = unit(8, "pt"),
legend.title  = element_blank(),
legend.text   = element_text(color = 'black', size   = 6),
axis.line = element_blank(),
panel.border = element_rect(linetype = 'solid', size = 0.6,fill = NA)
)
print(p)
save(p_roc, file = file.path(Rdata_dir,'step50_nom_calibration_validation_GEO.Rdata'))
ggsave(filename = file.path(Figure_dir,'step50_nom_ggplot_calibration_validation_GEO_6_6cm.pdf'),
plot = last_plot(), width = 6, height = 6, units = 'cm', dpi = 600)
}
#save(p_roc, file = file.path(Rdata_dir,'step50_nom_calibration_validation_GEO.Rdata'))
ggsave(filename = file.path(Figure_dir,'step50_nom_ggplot_calibration_validation_GEO_6_6cm.pdf'),
plot = last_plot(), width = 6, height = 6, units = 'cm', dpi = 600)
plot(calev3,lwd=1.2,lty=1,
cex.axis=0.7, #坐标轴刻度文字的缩放倍数
cex.lab=0.8, #坐标轴标签（名称）的缩放倍数
errbar.col='red',
xlim=c(0,1.05),
ylim=c(0,1.05),
xlab="Predicted Survival Probability",
ylab="Actual Survival Probability",
col='blue',
subtitles=F#不加左下角和右下角的注释
)
plot(calev5,lwd=1.2,lty=1,errbar.col='green',col='green',add=T)
plot(calev10,lwd=1.2,lty=1,errbar.col='orange',col='orange',add=T)
Fig_name = file.path(Figure_dir,'step50_nom_calibration_validation-GEO.pdf')
pdf(Fig_name,
width = 2.36,#单位是英寸
height = 2.36)
#mai指定绘制的矩形外围空白大小，c(bottom, left, top, right) in inches.
par(mai = c(0.8,0.8,0.05,0.1))
plot(calev3,lwd=1.2,lty=1,
cex.axis=0.7, #坐标轴刻度文字的缩放倍数
cex.lab=0.8, #坐标轴标签（名称）的缩放倍数
errbar.col='red',
xlim=c(0,1.05),
ylim=c(0,1.05),
xlab="Predicted Survival Probability",
ylab="Actual Survival Probability",
col='blue',
subtitles=F#不加左下角和右下角的注释
)
plot(calev5,lwd=1.2,lty=1,errbar.col='green',col='green',add=T)
plot(calev10,lwd=1.2,lty=1,errbar.col='orange',col='orange',add=T)
text(0.86,0.03,'10-year Survival',col='orange',cex =0.7)
text(0.86,0.1,'5-year Survival',col='green',cex =0.7)
text(0.86,0.17,'3-year Survival',col='blue',cex =0.7)
dev.off()
dev.off()
#方法一：用calibrate自带的plot绘制（丑，不好调整）
if(T){
Fig_name = file.path(Figure_dir,'step50_nom_calibration_validation-GEO.pdf')
pdf(Fig_name,
width = 4,#单位是英寸
height = 4)
#mai指定绘制的矩形外围空白大小，c(bottom, left, top, right) in inches.
par(mai = c(0.8,0.8,0.05,0.1))
plot(calev3,lwd=1.2,lty=1,
cex.axis=0.7, #坐标轴刻度文字的缩放倍数
cex.lab=0.8, #坐标轴标签（名称）的缩放倍数
errbar.col='red',
xlim=c(0,1.05),
ylim=c(0,1.05),
xlab="Predicted Survival Probability",
ylab="Actual Survival Probability",
col='blue',
subtitles=F#不加左下角和右下角的注释
)
plot(calev5,lwd=1.2,lty=1,errbar.col='green',col='green',add=T)
plot(calev10,lwd=1.2,lty=1,errbar.col='orange',col='orange',add=T)
text(0.86,0.03,'10-year Survival',col='orange',cex =0.7)
text(0.86,0.1,'5-year Survival',col='green',cex =0.7)
text(0.86,0.17,'3-year Survival',col='blue',cex =0.7)
dev.off()
}
#Cox analysis; nomogram
rm(list=ls())
request_cancer="SKCM"
options(stringsAsFactors = F)
Rdata_dir='../Rdata/'
Figure_dir='../figures/'
Table_dir='../tables/'
library("survival")
library("survminer")
library('forestplot')
#1.load clinical data and riskScore
if(T){
load(file = file.path(Rdata_dir,'step50_LASSO_KM_input.RData'))
#phe includes survival time,survival status and riskScore
workflow_type = "HTSeq - FPKM"
exprSym_f=file.path(Rdata_dir,
paste(paste("TCGA",request_cancer,workflow_type,'exprSym_meta_groupT-N.RData',sep="-")))
load(file = exprSym_f)
dat_meta = meta[match(rownames(phe),meta$submitter_id),c('submitter_id','age_at_diagnosis','gender',
'ajcc_pathologic_stage','ajcc_pathologic_t',
'ajcc_pathologic_n','ajcc_pathologic_m')]
identical(rownames(phe),dat_meta$submitter_id)
dat_meta = cbind(phe[,c('time','status','riskScore')],dat_meta)
dat_meta = na.omit(dat_meta[,-4])
}
#2.Data type conversion (classification variables such as gender, grade variables such as stage should be converted to numbers)
if(T){
dat=dat_meta
dat$gender = ifelse(dat$gender=='male',1,2) #1 male，2 female
colnames(dat)[4] = 'age_year'
dat$age_year = dat$age_year/365
dat$age[dat$age_year<75] <- 1
dat$age[dat$age_year>=75] <- 2
#construct function to convert stage to number
map_To_num <- function(x){
a=10
if(x %in% c('Stage 0','T0','N0','M0'))
a=1
if(x %in% c('Stage I','Stage IA','Stage IB','Tis','T1','T1a','T1b',
'N1','N1a','N1b','M1a','M1b','M1c'))
a=2
if(x %in% c('Stage II','Stage IIA','Stage IIB','Stage IIC','T2','T2a','T2b',
'N2','N2a','N2b','N2c'))
a=3
if(x %in% c('Stage III','Stage IIIA','Stage IIIB','Stage IIIC','T3','T3a','T3b',
'N3'))
a=4
if(x %in% c('Stage IV','T4','T4a','T4b'))
a=5
return(a)
}
dat_stage=apply(as.matrix(dat[,6:9]),c(1,2),map_To_num)
colnames(dat_stage) = c('stage','T','N','M')
identical(rownames(dat),rownames(dat_stage))
dat = cbind(dat,dat_stage)
}
library(survival)
library(rms)
library(survivalROC)
#load the matrix for nomogram construction---dat_nom
l = load(file = file.path(Rdata_dir,'dat_for_nomogram_construction.Rdata'))
l
dd <- datadist(dat_nom)
options(datadist='dd')
dd
coxm <- cph(Surv(time,status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom, x=T, y=T, surv = T)
surv <- Survival(coxm)
surv1 <- function(x)surv(1,lp=x)
surv3 <- function(x)surv(3,lp=x)
surv5 <- function(x)surv(5,lp=x)
surv10 <- function(x)surv(10,lp=x)
nom<- nomogram(coxm,
fun = list(surv1,surv3,
surv5,surv10),
fun.at = c(0.1,seq(0.1,0.9,by=0.1),0.9),
maxscale = 100,#default maximum point score is 100
funlabel = c('1-Year Survival','3-Year Survival',
'5-Year Survival','10-Year Survival'),
lp=F
)
plot(nom,
ia.space = 0.2,
cex.axis = 0.4,#character size for tick mark labels
cex.var = 0.6, #	character size for axis titles (variable names)
xfrac = 0.18,#fraction of horizontal plot to set aside for axis titles
tcl=-0.15,#length of tick marks in nomogram
lmgp = 0.05 #spacing between numeric axis labels and axis
)
if(T){
f1 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=1)
f3 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=3)
f5 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=5)
f10 <- cph(Surv(time, status) ~ Age+Stage_T+Stage_N+RiskScore,
data = dat_nom,
x=T, y=T, surv=T, time.inc=10)
cal1 <- calibrate(f1, cmethod="KM", method="boot",
u=1, # u represents the predicted time point, which should be consistent with time.inc defined in above model
m=112, # m should be determined according to sample size.
#The standard curve generally divides all samples into 3 groups (3 points shown in the figure).
#m represents the sample size of each group, so m*3 should be equal to or approximately equal to the sample size
B=336
)
cal3 <- calibrate(f3, cmethod="KM", method="boot",
u=3,
m=112,
B=336
)
cal5 <- calibrate(f5, cmethod="KM", method="boot",
u=5,
m=112,
B=336
)
cal10 <- calibrate(f10, cmethod="KM", method="boot",
u=10,
m=112,
B=500
)
}
# Plot
if(T){
Fig_name = file.path(Figure_dir,'step09_nom_calibration_6_6cm.pdf')
pdf(Fig_name,
width = 4,
height = 4)
#mai = c(bottom, left, top, right) in inches.
par(mai = c(0.8,0.8,0.05,0.1))
plot(cal1,lwd=1.2,lty=1,
cex.axis=0.7,
cex.lab=0.8,
errbar.col='red',
xlim=c(0,1.05),
ylim=c(0,1.05),
xlab="Predicted Survival Probability",
ylab="Actual Survival Probability",
col='red',
subtitles=F
)
plot(cal3,lwd=1,lty=1,
errbar.col='blue',col='blue',
add=T #set to TRUE to add the calibration plot to an existing plot
)
plot(cal5,lwd=1,lty=1,errbar.col='green',col='green',add=T)
plot(cal10,lwd=1,lty=1,errbar.col='orange',col='orange',add=T)
text(0.86,0.03,'10-year Survival',col='orange',cex =0.7)
text(0.86,0.1,'5-year Survival',col='green',cex =0.7)
text(0.86,0.17,'3-year Survival',col='blue',cex =0.7)
text(0.86,0.24,'1-year Survival',col='red',cex =0.7)
dev.off()
}
GSEName = 'GSE98394'
# step01.load clinical data and riskScore of GEO dataset
if(T){
load(file = file.path(Rdata_dir,paste(GSEName,'RData',sep=".")))
a=as.data.frame(t(exprSet))
ggplot(a,aes(x=a[,2]))+geom_density()
identical(rownames(meta),colnames(exprSet))
phe = na.omit(meta[,c(11,12,4,7,8)])
colnames(phe) = c('time','status','age','T','N')
phe$time = as.numeric(phe$time)
phe$time = phe$time/12
phe = na.omit(phe)
dim(phe)
exprSet = exprSet[,rownames(phe)]
dim(exprSet)
#Calculate RS for patients
if(T){
load(file = file.path(Rdata_dir,'step50_LASSO_modeleGenes_coef.RData'))
LASSOgenes = rownames(coef_out3)
exprSet_t = t(exprSet)
LASSOgenes[3] = 'RASSF3'
expr_LASSOgenes = exprSet_t[,LASSOgenes]
phe = cbind(phe,expr_LASSOgenes)
phe$riskScore = coef_out3[1,1]*phe[,6] + coef_out3[2,1]*phe[,7] +
coef_out3[3,1]*phe[,8] + coef_out3[4,1]*phe[,9] +
coef_out3[5,1]*phe[,10] + coef_out3[6,1]*phe[,11] + coef_out3[7,1]*phe[,12]
phe = phe[order(phe$riskScore,decreasing = FALSE),]
}
#Collect data for medel validation
dat_geo = phe
dat_geo$Age = ifelse(dat_geo$age<75,'<75','>=75')
dat_geo$Age = factor(dat_geo$Age,ordered=F,levels = c('<75','>=75'))
dat_geo$Stage_T = factor(substr(dat_geo$T,1,2),ordered=F,levels = c('T0','T1','T2','T3','T4'))
stage_N = substr(dat_geo$N,1,2)
dat_geo$Stage_N = ifelse(stage_N=='Nx','N1',stage_N)
colnames(dat_geo)[13] = 'RiskScore'
dat_geo = dat_geo[,c('time','status','Age','Stage_T','Stage_N','RiskScore')]
}
